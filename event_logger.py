import win32evtlog
from datetime import datetime, timedelta
import datetime as dt
import os
import re
import xmltodict
import json
import requests
from config import VIRUSTOTAL_API_KEY
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import pkg_resources

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TIME_RANGE_MINUTES = 1  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ (1 –º–∏–Ω—É—Ç–∞)
STARTUP_LOG_FILE = "last_startup.log"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è
LOGON_LOG_FILE = "last_logon.log"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
PRIVILEGE_LOG_FILE = "last_privilege.log"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è 4672
TASK_LOG_FILE = "last_task.log"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è 4698
SERVICE_LOG_FILE = "last_service.log"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è 4697/7045
SYSMON_LOG_FILE = "sysmon_seen.log"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ProcessGuid —Å–æ–±—ã—Ç–∏–π Sysmon
SYSMON_CACHE_FILE = "vt_cache.json"  # –§–∞–π–ª –¥–ª—è –∫—ç—à–∞ VirusTotal

# –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
EVENTS_6005_LOG = "events_6005.json"  # –õ–æ–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏–π –ü–ö
EVENTS_4624_LOG = "events_4624.json"  # –õ–æ–≥ –¥–ª—è –≤—Ö–æ–¥–æ–≤
EVENTS_4672_LOG = "events_4672.json"  # –õ–æ–≥ –¥–ª—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
EVENTS_4698_LOG = "events_4698.json"  # –õ–æ–≥ –¥–ª—è –∑–∞–¥–∞—á
EVENTS_SERVICE_LOG = "events_service.json"  # –õ–æ–≥ –¥–ª—è —Å–ª—É–∂–±
EVENTS_SYSMON_LOG = "events_sysmon.json"  # –õ–æ–≥ –¥–ª—è Sysmon

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ DejaVuSans –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
try:
    font_path = pkg_resources.resource_filename('reportlab', 'fonts/DejaVuSans.ttf')
    if not os.path.exists(font_path):
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É (–Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏ —É–∫–∞–∑–∞—Ç—å)
        font_path = os.path.join(os.path.dirname(__file__), "DejaVuSans.ttf")
    pdfmetrics.registerFont(TTFont("DejaVuSans", font_path))
    print("–®—Ä–∏—Ñ—Ç DejaVuSans –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞ DejaVuSans: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª DejaVuSans.ttf –¥–æ—Å—Ç—É–ø–µ–Ω.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞
def read_last_event_time(file_name):
    if not os.path.exists(file_name):
        return None
    try:
        with open(file_name, "r") as f:
            last_time_str = f.read().strip()
            if not last_time_str or last_time_str.isspace():
                print(f"–§–∞–π–ª {file_name} –ø—É—Å—Ç, —É–¥–∞–ª—è–µ–º")
                os.remove(file_name)
                return None
            if re.match(r'^[\dT:+\-\.Z]+$', last_time_str):
                return datetime.fromisoformat(last_time_str)
            print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {file_name}: {last_time_str}")
            os.remove(file_name)
            return None
    except PermissionError as e:
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {file_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {e}. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_name}: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
async def write_last_event_time(file_name, event_time, send_message_func):
    try:
        with open(file_name, "w") as f:
            f.write(event_time.isoformat())
        print(f"–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_name}: {event_time}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {file_name}: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ {file_name} - {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
async def log_event_to_json(file_name, event_data, send_message_func):
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_name):
            with open(file_name, "w") as f:
                json.dump([], f)

        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        with open(file_name, "r") as f:
            events = json.load(f)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        events.append(event_data)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open(file_name, "w") as f:
            json.dump(events, f, indent=4)
        print(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {file_name}: {event_data}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {file_name}: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ {file_name} - {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
async def clear_event_logs(send_message_func):
    log_files = [
        EVENTS_6005_LOG, EVENTS_4624_LOG, EVENTS_4672_LOG,
        EVENTS_4698_LOG, EVENTS_SERVICE_LOG, EVENTS_SYSMON_LOG
    ]
    for file_name in log_files:
        try:
            with open(file_name, "w") as f:
                json.dump([], f)
            print(f"–õ–æ–≥ {file_name} –æ—á–∏—â–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {file_name}: {e}")
            await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ {file_name} - {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á–µ—Ç–∞
async def generate_pdf_report(date, send_message_func, send_document_func):
    output_file = f"report_{date.strftime('%Y-%m-%d')}.pdf"
    c = canvas.Canvas(output_file, pagesize=letter)
    c.setFont("DejaVuSans", 12)
    y = 750
    c.drawString(100, y, f"–û—Ç—á–µ—Ç –ø–æ —Å–æ–±—ã—Ç–∏—è–º –∑–∞ {date.strftime('%Y-%m-%d')}")
    y -= 30

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    log_files = [
        (EVENTS_6005_LOG, "–í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"),
        (EVENTS_4624_LOG, "–í—Ö–æ–¥—ã –≤ —Å–∏—Å—Ç–µ–º—É"),
        (EVENTS_4672_LOG, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π"),
        (EVENTS_4698_LOG, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"),
        (EVENTS_SERVICE_LOG, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É–∂–±"),
        (EVENTS_SYSMON_LOG, "–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (Sysmon)")
    ]

    for log_file, title in log_files:
        try:
            with open(log_file, "r") as f:
                events = json.load(f)
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ
            events = [e for e in events if datetime.fromisoformat(e["time"]).date() == date]
            if events:
                c.drawString(100, y, f"{title}:")
                y -= 20
                for event in events:
                    if y < 50:  # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –µ—Å–ª–∏ –º–∞–ª–æ –º–µ—Å—Ç–∞
                        c.showPage()
                        c.setFont("DejaVuSans", 12)
                        y = 750
                    summary = event.get("summary", str(event))
                    c.drawString(100, y, f"{event['time']}: {summary}")
                    y -= 20
                y -= 10
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file} –¥–ª—è –æ—Ç—á–µ—Ç–∞: {e}")
            await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {log_file} - {str(e)}")

    c.save()
    print(f"PDF-–æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_file}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ Telegram
    try:
        await send_document_func(output_file)
        print(f"PDF-–æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {output_file}")
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await clear_event_logs(send_message_func)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF-–æ—Ç—á–µ—Ç - {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ –∂—É—Ä–Ω–∞–ª–µ Security (4624, 4672, 4698)
async def check_security_events(send_message_func):
    print(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π Security (4624, 4672, 4698) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É...")

    try:
        security_log = win32evtlog.OpenEventLog("localhost", "Security")
        print("–ñ—É—Ä–Ω–∞–ª Security –æ—Ç–∫—Ä—ã—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞ Security: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª Security - {str(e)}")
        return [], [], []

    flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
    now = datetime.now(dt.timezone.utc)
    time_threshold = now - timedelta(minutes=TIME_RANGE_MINUTES)
    logon_events = []
    privilege_events = []
    task_events = []

    while True:
        try:
            events = win32evtlog.ReadEventLog(security_log, flags, 0)
            if not events:
                print("–°–æ–±—ã—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ Security: {e}")
            break

        for event in events:
            event_id = event.EventID & 0xFFFF
            event_time = event.TimeGenerated.replace(tzinfo=dt.timezone.utc)

            if event_time < time_threshold:
                break

            if event_id == 4624:
                event_data = event.StringInserts or []
                if len(event_data) > 9:
                    logon_type = event_data[8]
                    user = event_data[5]
                    account_domain = event_data[6]
                    if logon_type in ["2", "7", "15"]:
                        event_info = {
                            "time": event_time.isoformat(),
                            "user": user,
                            "domain": account_domain,
                            "logon_type": logon_type,
                            "data": event_data
                        }
                        logon_events.append(event_info)
                        # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        await log_event_to_json(EVENTS_4624_LOG, {
                            "time": event_time.isoformat(),
                            "summary": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, –¢–∏–ø: {logon_type}, –î–æ–º–µ–Ω: {account_domain}"
                        }, send_message_func)

            elif event_id == 4672:
                event_data = event.StringInserts or []
                if len(event_data) >= 3:
                    sid = event_data[0]
                    user = event_data[1]
                    account_domain = event_data[2]
                    privileges = event_data[3] if len(event_data) > 3 else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                    if user not in ["–°–ò–°–¢–ï–ú–ê", "SYSTEM"] and sid != "S-1-5-18":
                        if privileges and privileges != "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ":
                            privileges = ", ".join([p.strip() for p in privileges.split("\r\n") if p.strip()])
                        event_info = {
                            "time": event_time.isoformat(),
                            "user": user,
                            "domain": account_domain,
                            "privileges": privileges,
                            "data": event_data
                        }
                        privilege_events.append(event_info)
                        # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        await log_event_to_json(EVENTS_4672_LOG, {
                            "time": event_time.isoformat(),
                            "summary": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {privileges}, –î–æ–º–µ–Ω: {account_domain}"
                        }, send_message_func)

            elif event_id == 4698:
                event_data = event.StringInserts or []
                if len(event_data) >= 5:
                    sid = event_data[0]
                    user = event_data[1]
                    account_domain = event_data[2]
                    task_name = event_data[4]
                    task_content = event_data[5] if len(event_data) > 5 else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                    if user not in ["–°–ò–°–¢–ï–ú–ê", "SYSTEM"] and sid != "S-1-5-18":
                        event_info = {
                            "time": event_time.isoformat(),
                            "user": user,
                            "domain": account_domain,
                            "task_name": task_name,
                            "task_content": task_content,
                            "data": event_data
                        }
                        task_events.append(event_info)
                        # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                        await log_event_to_json(EVENTS_4698_LOG, {
                            "time": event_time.isoformat(),
                            "summary": f"–ó–∞–¥–∞—á–∞: {task_name}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {task_content}"
                        }, send_message_func)

    win32evtlog.CloseEventLog(security_log)
    print("–ñ—É—Ä–Ω–∞–ª Security –∑–∞–∫—Ä—ã—Ç")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤—Ö–æ–¥–∞ (4624)
    last_saved_logon_time = read_last_event_time(LOGON_LOG_FILE)
    logon_types = {
        "2": "–õ–æ–∫–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥",
        "7": "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
        "15": "–£–¥–∞–ª–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ (RDP)"
    }
    for event in sorted(logon_events, key=lambda x: datetime.fromisoformat(x["time"]), reverse=True):
        event_time = datetime.fromisoformat(event["time"])
        if last_saved_logon_time is None or event_time > last_saved_logon_time:
            event_time_str = event_time.strftime("%Y-%m-%d %H:%M:%S")
            message = (
                f"üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                f"–í—Ä–µ–º—è: {event_time_str}\n"
                f"–î–æ–º–µ–Ω: {event['domain'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                f"–¢–∏–ø –≤—Ö–æ–¥–∞: {logon_types.get(event['logon_type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')} "
                f"(—Ç–∏–ø {event['logon_type']})\n"
                f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {event['data']}"
            )
            await send_message_func(message)
            print(
                f"üü¢ Event ID: 4624\n    –í—Ä–µ–º—è (–ú–°–ö): {event_time_str}\n    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user']}\n    –î–æ–º–µ–Ω: {event['domain']}\n    –¢–∏–ø –≤—Ö–æ–¥–∞: {event['logon_type']}")
            print("-" * 50)
    if logon_events:
        latest_logon_time = max(datetime.fromisoformat(event["time"]) for event in logon_events)
        if last_saved_logon_time is None or latest_logon_time > last_saved_logon_time:
            await write_last_event_time(LOGON_LOG_FILE, latest_logon_time, send_message_func)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π (4672)
    last_saved_privilege_time = read_last_event_time(PRIVILEGE_LOG_FILE)
    for event in sorted(privilege_events, key=lambda x: datetime.fromisoformat(x["time"]), reverse=True):
        event_time = datetime.fromisoformat(event["time"])
        if last_saved_privilege_time is None or event_time > last_saved_privilege_time:
            event_time_str = event_time.strftime("%Y-%m-%d %H:%M:%S")
            message = (
                f"üîí –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                f"–í—Ä–µ–º—è: {event_time_str}\n"
                f"–î–æ–º–µ–Ω: {event['domain'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {event['privileges'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {event['data']}"
            )
            await send_message_func(message)
            print(
                f"üü¢ Event ID: 4672\n    –í—Ä–µ–º—è (–ú–°–ö): {event_time_str}\n    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user']}\n    –î–æ–º–µ–Ω: {event['domain']}\n    –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏: {event['privileges']}")
            print("-" * 50)
    if privilege_events:
        latest_privilege_time = max(datetime.fromisoformat(event["time"]) for event in privilege_events)
        if last_saved_privilege_time is None or latest_privilege_time > last_saved_privilege_time:
            await write_last_event_time(PRIVILEGE_LOG_FILE, latest_privilege_time, send_message_func)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á (4698)
    last_saved_task_time = read_last_event_time(TASK_LOG_FILE)
    for event in sorted(task_events, key=lambda x: datetime.fromisoformat(x["time"]), reverse=True):
        event_time = datetime.fromisoformat(event["time"])
        if last_saved_task_time is None or event_time > last_saved_task_time:
            event_time_msk = event_time + timedelta(hours=3)
            time_str = event_time_msk.strftime("%d.%m.%Y %H:%M:%S")
            event_time_str = event_time.strftime("%Y-%m-%d %H:%M:%S")
            print(f"üü¢ Event ID: 4698")
            print(f"    –í—Ä–µ–º—è (–ú–°–ö): {time_str}")
            print(f"    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}")
            print(f"    –î–æ–º–µ–Ω: {event['domain'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}")
            print(f"    –ò–º—è –∑–∞–¥–∞—á–∏: {event['task_name'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
            print(f"    –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏: {event['task_content'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
            print("-" * 50)
            message = (
                f"üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {event['task_name'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                f"–î–æ–º–µ–Ω: {event['domain'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                f"–í—Ä–µ–º—è: {event_time_str}\n"
                f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {event['task_content'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}"
            )
            await send_message_func(message)
    if task_events:
        latest_task_time = max(datetime.fromisoformat(event["time"]) for event in task_events)
        if last_saved_task_time is None or latest_task_time > last_saved_task_time:
            await write_last_event_time(TASK_LOG_FILE, latest_task_time, send_message_func)

    return logon_events, privilege_events, task_events


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (Event ID 6005)
async def check_system_startup(send_message_func, send_document_func):
    print(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É...")

    try:
        system_log = win32evtlog.OpenEventLog("localhost", "System")
        print("–ñ—É—Ä–Ω–∞–ª System –æ—Ç–∫—Ä—ã—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª System - {str(e)}")
        return

    now = datetime.now(dt.timezone.utc)
    time_threshold = now - timedelta(minutes=TIME_RANGE_MINUTES)
    last_saved_time = read_last_event_time(STARTUP_LOG_FILE)
    last_startup_event = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    if last_saved_time:
        last_date = last_saved_time.date()
        current_date = now.date()
        if last_date < current_date:
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –¥–Ω—è: –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ {last_date}, —Ç–µ–∫—É—â–∞—è {current_date}")
            await generate_pdf_report(last_date, send_message_func, send_document_func)

    while True:
        try:
            events = win32evtlog.ReadEventLog(
                system_log,
                win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ,
                0
            )
            if not events:
                print("–°–æ–±—ã—Ç–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞: {e}")
            break

        for event in events:
            event_id = event.EventID & 0xFFFF
            event_time = event.TimeGenerated.replace(tzinfo=dt.timezone.utc)

            if event_time < time_threshold:
                break

            if event_id == 6005:
                event_data = event.StringInserts
                data_str = event_data[0] if event_data and isinstance(event_data, list) and len(
                    event_data) > 0 else None
                if not data_str:
                    try:
                        data_str = event.Message or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    except AttributeError:
                        data_str = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                print(f"–û—Ç–ª–∞–¥–∫–∞ 6005: StringInserts={event_data}, Message={getattr(event, 'Message', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}")
                if last_startup_event is None or event_time > last_startup_event["time"]:
                    last_startup_event = {
                        "time": event_time,
                        "data": data_str
                    }
                print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ 6005: –í—Ä–µ–º—è {event_time}, –î–∞–Ω–Ω—ã–µ {data_str}")
                # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                await log_event_to_json(EVENTS_6005_LOG, {
                    "time": event_time.isoformat(),
                    "summary": f"–í–∫–ª—é—á–µ–Ω–∏–µ –ü–ö, –î–µ—Ç–∞–ª–∏: {data_str}"
                }, send_message_func)

    win32evtlog.CloseEventLog(system_log)
    print("–ñ—É—Ä–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç")

    if last_startup_event:
        event_time = last_startup_event["time"]
        if last_saved_time is None or event_time > last_saved_time:
            event_time_str = event_time.strftime("%Y-%m-%d %H:%M:%S")
            message = f"üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω! –í—Ä–µ–º—è: {event_time_str}" + \
                      (f", –î–µ—Ç–∞–ª–∏: {last_startup_event['data']}" if last_startup_event['data'] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" else "")
            await write_last_event_time(STARTUP_LOG_FILE, event_time, send_message_func)
            await send_message_func(message)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª—É–∂–± (Event ID 4697 –∏ 7045)
async def check_service_modification(send_message_func):
    print(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π 4697 –∏ 7045 (—Å–ª—É–∂–±—ã) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É...")

    now = datetime.now(dt.timezone.utc)
    time_threshold = now - timedelta(minutes=TIME_RANGE_MINUTES)
    last_saved_time = read_last_event_time(SERVICE_LOG_FILE)
    new_service_events = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π 4697 (Security)
    try:
        security_log = win32evtlog.OpenEventLog("localhost", "Security")
        print("–ñ—É—Ä–Ω–∞–ª Security –æ—Ç–∫—Ä—ã—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞ Security: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª Security - {str(e)}")
        return

    flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ

    while True:
        try:
            events = win32evtlog.ReadEventLog(security_log, flags, 0)
            if not events:
                print("–°–æ–±—ã—Ç–∏–π 4697 –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ Security: {e}")
            await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∂—É—Ä–Ω–∞–ª Security - {str(e)}")
            break

        for event in events:
            event_id = event.EventID & 0xFFFF
            event_time = event.TimeGenerated.replace(tzinfo=dt.timezone.utc)

            if event_time < time_threshold:
                break

            if event_id == 4697:
                event_data = event.StringInserts or []
                sid = None
                user = None
                account_domain = None
                service_name = None
                service_file_name = None
                service_type = None
                service_start_type = None
                service_account = None

                if len(event_data) >= 8:
                    sid = event_data[0]
                    user = event_data[1]
                    account_domain = event_data[2]
                    service_name = event_data[4]
                    service_file_name = event_data[5]
                    service_type = event_data[6]
                    service_start_type = event_data[7]
                    service_account = event_data[8] if len(event_data) > 8 else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

                if user in ["–°–ò–°–¢–ï–ú–ê", "SYSTEM"] or sid == "S-1-5-18":
                    continue

                event_info = {
                    "event_id": 4697,
                    "time": event_time.isoformat(),
                    "user": user,
                    "domain": account_domain,
                    "service_name": service_name,
                    "service_file_name": service_file_name,
                    "service_type": service_type,
                    "service_start_type": service_start_type,
                    "service_account": service_account,
                    "data": event_data
                }
                new_service_events.append(event_info)
                # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                await log_event_to_json(EVENTS_SERVICE_LOG, {
                    "time": event_time.isoformat(),
                    "summary": f"–ù–æ–≤–∞—è —Å–ª—É–∂–±–∞: {service_name}, –¢–∏–ø: {service_start_type}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}"
                }, send_message_func)

    win32evtlog.CloseEventLog(security_log)
    print("–ñ—É—Ä–Ω–∞–ª Security –∑–∞–∫—Ä—ã—Ç")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π 7045 (System)
    try:
        system_log = win32evtlog.OpenEventLog("localhost", "System")
        print("–ñ—É—Ä–Ω–∞–ª System –æ—Ç–∫—Ä—ã—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞ System: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª System - {str(e)}")
        return

    while True:
        try:
            events = win32evtlog.ReadEventLog(system_log, flags, 0)
            if not events:
                print("–°–æ–±—ã—Ç–∏–π 7045 –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ System: {e}")
            await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∂—É—Ä–Ω–∞–ª System - {str(e)}")
            break

        for event in events:
            event_id = event.EventID & 0xFFFF
            event_time = event.TimeGenerated.replace(tzinfo=dt.timezone.utc)

            if event_time < time_threshold:
                break

            if event_id == 7045:
                event_data = event.StringInserts or []
                service_name = None
                service_file_name = None
                service_type = None
                service_start_type = None
                service_account = None
                user = None

                if len(event_data) >= 5:
                    service_name = event_data[0]
                    service_file_name = event_data[1]
                    service_start_type = event_data[2]
                    service_type = event_data[3]
                    service_account = event_data[4]
                    user = event_data[5] if len(event_data) > 5 else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

                if user in ["–°–ò–°–¢–ï–ú–ê", "SYSTEM"]:
                    continue

                event_info = {
                    "event_id": 7045,
                    "time": event_time.isoformat(),
                    "user": user,
                    "domain": "–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ",
                    "service_name": service_name,
                    "service_file_name": service_file_name,
                    "service_type": service_type,
                    "service_start_type": service_start_type,
                    "service_account": service_account,
                    "data": event_data
                }
                new_service_events.append(event_info)
                # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                await log_event_to_json(EVENTS_SERVICE_LOG, {
                    "time": event_time.isoformat(),
                    "summary": f"–ò–∑–º–µ–Ω–µ–Ω–∞ —Å–ª—É–∂–±–∞: {service_name}, –¢–∏–ø: {service_start_type}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}"
                }, send_message_func)

    win32evtlog.CloseEventLog(system_log)
    print("–ñ—É—Ä–Ω–∞–ª System –∑–∞–∫—Ä—ã—Ç")

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    new_service_events.sort(key=lambda x: datetime.fromisoformat(x["time"]), reverse=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if new_service_events:
        latest_event_time = max(datetime.fromisoformat(event["time"]) for event in new_service_events)
        for event in new_service_events:
            if last_saved_time is None or datetime.fromisoformat(event["time"]) > last_saved_time:
                event_time_str = datetime.fromisoformat(event["time"]).strftime("%Y-%m-%d %H:%M:%S")
                start_type = event["service_start_type"]
                # –î–ª—è 4697 –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø –∑–∞–ø—É—Å–∫–∞
                if event["event_id"] == 4697:
                    start_types = {
                        "0": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã",
                        "1": "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —è–¥—Ä–∞",
                        "2": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫",
                        "3": "–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é",
                        "4": "–û—Ç–∫–ª—é—á–µ–Ω–∞"
                    }
                    start_type = start_types.get(start_type, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø ({start_type})")
                event_type = "–ù–æ–≤–∞—è —Å–ª—É–∂–±–∞" if event["event_id"] == 4697 else "–ò–∑–º–µ–Ω–µ–Ω–∞ —Å–ª—É–∂–±–∞"
                message = (
                    f"‚öôÔ∏è {event_type}: \"{event['service_name'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\" "
                    f"–¢–∏–ø: {start_type or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'} "
                    f"–í—Ä–µ–º—è: {event_time_str}"
                )
                await send_message_func(message)
                print(
                    f"‚öôÔ∏è {event_type} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É:\n"
                    f"–°–ª—É–∂–±–∞: {event['service_name'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {event['user'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                    f"–í—Ä–µ–º—è: {event_time_str}\n"
                    f"–î–æ–º–µ–Ω: {event['domain'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω'}\n"
                    f"–ü—É—Ç—å: {event['service_file_name'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                    f"–¢–∏–ø —Å–ª—É–∂–±—ã: {event['service_type'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                    f"–¢–∏–ø –∑–∞–ø—É—Å–∫–∞: {start_type or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                    f"–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: {event['service_account'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
                    f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {event['data']}"
                )
        if last_saved_time is None or latest_event_time > last_saved_time:
            await write_last_event_time(SERVICE_LOG_FILE, latest_event_time, send_message_func)
    else:
        print("–ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π 4697 –∏–ª–∏ 7045 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π Sysmon (Event ID 1)
async def check_sysmon_process(send_message_func):
    print(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π Sysmon (Event ID 1) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º log, –æ—á–∏—â–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö
    seen_guids = {}
    cutoff = datetime.now(dt.UTC) - timedelta(hours=24)
    if os.path.exists(SYSMON_LOG_FILE):
        try:
            with open(SYSMON_LOG_FILE, "r") as f:
                for line in f:
                    if '|' in line:
                        guid, timestr = line.strip().split('|', 1)
                        try:
                            ts = datetime.strptime(timestr, "%Y-%m-%dT%H:%M:%S").replace(tzinfo=dt.UTC)
                            if ts > cutoff:
                                seen_guids[guid] = ts
                        except ValueError as e:
                            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–≥–µ {SYSMON_LOG_FILE}: {line.strip()} - {e}")
                            continue
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(seen_guids)} ProcessGuid –∏–∑ {SYSMON_LOG_FILE}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {SYSMON_LOG_FILE}: {e}")
            await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {SYSMON_LOG_FILE} - {str(e)}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ª–æ–≥ –±–µ–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    try:
        with open(SYSMON_LOG_FILE, "w") as f:
            for guid, ts in seen_guids.items():
                f.write(f"{guid}|{ts.strftime('%Y-%m-%dT%H:%M:%S')}\n")
        print(f"–û–±–Ω–æ–≤–ª—ë–Ω {SYSMON_LOG_FILE} —Å {len(seen_guids)} –∑–∞–ø–∏—Å—è–º–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {SYSMON_LOG_FILE}: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ {SYSMON_LOG_FILE} - {str(e)}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à VirusTotal
    vt_cache = {}
    if os.path.exists(SYSMON_CACHE_FILE):
        try:
            with open(SYSMON_CACHE_FILE, "r") as f:
                vt_cache = json.load(f)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à VirusTotal –∏–∑ {SYSMON_CACHE_FILE} ({len(vt_cache)} –∑–∞–ø–∏—Å–µ–π)")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞ VirusTotal: {e}")

    # –í—Ä–µ–º—è
    now_local = datetime.now()
    now_utc = now_local - timedelta(hours=3)
    one_minute_ago_utc = now_utc - timedelta(minutes=1)

    log_name = "Microsoft-Windows-Sysmon/Operational"
    query = (
        "*[System[TimeCreated[@SystemTime >= '{}']]]"
        .format(one_minute_ago_utc.strftime("%Y-%m-%dT%H:%M:%S.0000000Z"))
    )

    # –ó–∞–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π
    try:
        h = win32evtlog.EvtQuery(log_name, win32evtlog.EvtQueryReverseDirection, query)
        print("–ñ—É—Ä–Ω–∞–ª Sysmon –æ—Ç–∫—Ä—ã—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∂—É—Ä–Ω–∞–ª–∞ Sysmon: {e}")
        await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª Sysmon - {str(e)}")
        return

    event_count = 0
    new_guids = []
    while True:
        try:
            events = win32evtlog.EvtNext(h, 10)
        except Exception:
            break
        if not events:
            break

        for evt in events:
            xml_str = win32evtlog.EvtRender(evt, win32evtlog.EvtRenderEventXml)
            event_dict = xmltodict.parse(xml_str)

            system = event_dict.get("Event", {}).get("System", {})
            event_data = event_dict.get("Event", {}).get("EventData", {})
            event_id = system.get("EventID", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            if event_id != "1":
                continue

            utc_time_raw = system.get("TimeCreated", {}).get("@SystemTime", "")
            computer = system.get("Computer", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
            if '.' in utc_time_raw:
                prefix, suffix = utc_time_raw.split('.')
                fraction = suffix[:6]
                utc_time_clean = f"{prefix}.{fraction}Z"
            else:
                utc_time_clean = utc_time_raw

            try:
                dt_utc = datetime.strptime(utc_time_clean, "%Y-%m-%dT%H:%M:%S.%fZ")
            except ValueError:
                continue

            dt_msk = dt_utc + timedelta(hours=3)
            time_str = dt_msk.strftime("%d.%m.%Y %H:%M:%S")

            user_sid = system.get("Security", {}).get("@UserID", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            data_items = event_data.get("Data", [])

            process_image = None
            process_guid = None
            hashes = None
            command_line = None

            for d in data_items if isinstance(data_items, list) else []:
                name = d.get("@Name")
                text = d.get("#text", "")
                if name == "Image":
                    process_image = text
                elif name == "ProcessGuid":
                    process_guid = text
                elif name == "Hashes":
                    hashes = text
                elif name == "CommandLine":
                    command_line = text

            if not process_guid:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ProcessGuid")
                continue

            if process_guid in seen_guids:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: ProcessGuid {process_guid} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                continue

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ SHA256
            sha256 = None
            if hashes:
                for h in hashes.split(","):
                    if h.startswith("SHA256="):
                        sha256 = h.split("=")[1]
                        break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ VirusTotal
            vt_result = "<–Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ>"
            if sha256:
                if sha256 in vt_cache:
                    vt_result = vt_cache[sha256]
                else:
                    try:
                        response = requests.get(
                            f"https://www.virustotal.com/api/v3/files/{sha256}",
                            headers={"x-apikey": VIRUSTOTAL_API_KEY}
                        )
                        if response.status_code == 200:
                            stats = response.json().get("data", {}).get("attributes", {}).get("last_analysis_stats", {})
                            vt_result = f"{stats.get('malicious', 0)}/{stats.get('malicious', 0) + stats.get('undetected', 0)}"
                            vt_cache[sha256] = vt_result
                            try:
                                with open(SYSMON_CACHE_FILE, "w") as f:
                                    json.dump(vt_cache, f, indent=4)
                                print(f"–û–±–Ω–æ–≤–ª—ë–Ω –∫—ç—à VirusTotal: –¥–æ–±–∞–≤–ª–µ–Ω SHA256 {sha256}")
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {SYSMON_CACHE_FILE}: {e}")
                        elif response.status_code == 404:
                            vt_result = "0/0 (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)"
                    except Exception as e:
                        vt_result = f"–æ—à–∏–±–∫–∞: {str(e)}"

            # –í—ã–≤–æ–¥
            print(f"üü¢ Event ID: {event_id}")
            print(f"    –í—Ä–µ–º—è (–ú–°–ö): {time_str}")
            print(f"    –ö–æ–º–ø—å—é—Ç–µ—Ä:   {computer}")
            print(f"    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_sid}")
            print(f"    —Ö—ç—à:   {hashes}")
            print(f"    –∫–æ–º–∞–Ω–ª–∞–π–Ω:   {command_line}")
            if process_image:
                print(f"    –ü—Ä–æ—Ü–µ—Å—Å:     {process_image}")
            print("-" * 50)
            print(f"‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {process_image}")
            print(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {command_line or '<–Ω–µ—Ç>'}")
            print(f"SHA256: {sha256 or '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ>'}")
            print(f"VirusTotal: {vt_result}")
            print()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            message = (
                f"‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {process_image}\n"
                f"–í—Ä–µ–º—è (–ú–°–ö): {time_str}\n"
                f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {command_line or '<–Ω–µ—Ç>'}\n"
                f"SHA256: {sha256 or '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ>'}\n"
                f"VirusTotal: {vt_result}"
            )
            await send_message_func(message)

            # –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            await log_event_to_json(EVENTS_SYSMON_LOG, {
                "time": dt_utc.isoformat(),
                "summary": f"–ü—Ä–æ—Ü–µ—Å—Å: {process_image}, –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {command_line or '<–Ω–µ—Ç>'}, SHA256: {sha256 or '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ>'}, VirusTotal: {vt_result}"
            }, send_message_func)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π GUID
            new_guids.append((process_guid, dt_utc))
            event_count += 1

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ GUIDs –≤ –ª–æ–≥
    if new_guids:
        try:
            with open(SYSMON_LOG_FILE, "a") as f:
                for guid, ts in new_guids:
                    f.write(f"{guid}|{ts.strftime('%Y-%m-%dT%H:%M:%S')}\n")
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_guids)} –Ω–æ–≤—ã—Ö ProcessGuid –≤ {SYSMON_LOG_FILE}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö GUIDs –≤ {SYSMON_LOG_FILE}: {e}")
            await send_message_func(f"üìã –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–µ GUIDs –≤ {SYSMON_LOG_FILE} - {str(e)}")

    print(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π Sysmon –∑–∞ –º–∏–Ω—É—Ç—É: {event_count}")